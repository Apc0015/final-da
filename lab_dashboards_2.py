# -*- coding: utf-8 -*-
"""Lab Dashboards 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WFp9plgZOJKl10G0ezvBo43MHigXHSIw

# Dashboards using Streamlit


Some useful Streamlit comands:

* st.table() to visualize a table
* st.text_input() for search boxes
* st.slider() for numeric filters
* st.selectbox() for dropdown lists
* st.multiselect() for multiple-choice filters
* st.metric() for single-value KPIs
* Using st.columns() for side-by-side metrics
* Buttons: st.button()
* Toggles: st.checkbox()
* Radio buttons: st.radio()
* Date pickers: st.date_input()
* File uploads: st.file_uploader()
* Using st.bar_chart(), st.line_chart(), and st.area_chart()
* Using st.sidebar() for navigation and filters
* Using st.expander() for collapsible sections
* Organizing with st.container()
* st.image() to display an image (e.g., PNG, JPG).
"""

pip install streamlit

import streamlit as st
import pandas as pd
import numpy as np
import streamlit as st
# Sample Data
data = {
    'Order ID': range(1, 21),
    'Product': ['Laptop', 'Phone', 'Tablet', 'Monitor', 'Headphones'] * 4,
    'Category': ['Electronics', 'Electronics', 'Electronics', 'Accessories', 'Accessories'] * 4,
    'Price': np.random.randint(50, 1000, 20),
    'Quantity': np.random.randint(1, 5, 20)
}
df = pd.DataFrame(data)
df['Total'] = df['Price'] * df['Quantity']

# Sidebar Filter
st.sidebar.header("Filters")
category_filter = st.sidebar.selectbox("Select Category", ['All'] + list(df['Category'].unique()))
if category_filter != 'All':
    df = df[df['Category'] == category_filter]

# KPIs
st.title("E-commerce Sales Dashboard")
st.metric("Total Revenue", f"${df['Total'].sum():,.2f}")
st.metric("Total Orders", len(df))

# Data Table
st.subheader("Sales Data")
st.dataframe(df)

# Chart
st.subheader("Sales by Category")
category_sales = df.groupby('Category')['Total'].sum().reset_index()
st.bar_chart(category_sales.set_index('Category'))

"""## **Case Study 1: Employee Productivity Tracker**

#### **Problem Context**
A company wants to monitor employee productivity across different departments. The dashboard should:
1. Show a table of employees with their department, hours worked, and tasks completed.
2. Allow filtering by department.
3. Display average hours worked and total tasks completed.
4. Show a line chart of hours worked over time.
"""

import streamlit as st
import pandas as pd
import numpy as np

data = {
    'Employee': [f'Employee {i}' for i in range(1, 21)],
    'Department': ['HR', 'IT', 'Marketing', 'Finance'] * 5,
    'Hours Worked': np.random.randint(30, 50, 20),
    'Tasks Completed': np.random.randint(5, 20, 20)
}
df = pd.DataFrame(data)

# Sidebar Filter
st.sidebar.header("Filters")
department_filter = st.sidebar.selectbox("Select Department", ['All'] + list(df['Department'].unique()))
if department_filter != 'All':
    df = df[df['Department'] == department_filter]

# KPIs
st.title("Employee Productivity Tracker")
st.metric("Average Hours Worked", f"{df['Hours Worked'].mean():.1f} hrs")
st.metric("Total Tasks Completed", df['Tasks Completed'].sum())

# Data Table
st.subheader("Employee Data")
st.dataframe(df)

# Chart
st.subheader("Hours Worked Distribution")
st.line_chart(df[['Employee', 'Hours Worked']].set_index('Employee'))

"""### **Case Study 2: Sales Dashboard for an E-commerce Store**
An e-commerce company wants to track its sales performance using an interactive dashboard. The dashboard should allow users to:
1. View sales data in a table.
2. Filter by product category.
3. Create interactive charts

The dataset used in this case study is the Superstore-Sales.xls file, with the following columns:

| Column Name       | Description |
|------------------|------------|
| **Order ID**     | Unique identifier for each order. |
| **Order Date**   | Date when the order was placed. |
| **Ship Date**    | Date when the order was shipped. |
| **Ship Mode**    | Shipping type (e.g., Standard, First Class, Same Day). |
| **Customer ID**  | Unique identifier for each customer. |
| **Customer Name**| Full name of the customer. |
| **Segment**      | Market segment (e.g., Consumer, Corporate, Home Office). |
| **Country**      | Country where the order was placed. |
| **City**        | City of the customer. |
| **State**       | State or province. |
| **Region**      | Geographic region (e.g., East, West, Central). |
| **Category**    | Product category (e.g., Office Supplies, Technology, Furniture). |
| **Sub-Category** | More specific product classification (e.g., Chairs, Phones). |
| **Product ID**  | Unique identifier for each product. |
| **Product Name** | Name of the purchased product. |
| **Sales**       | Total revenue generated by the sale. |
| **Quantity**    | Number of items purchased. |
| **Discount**    | Discount applied to the order. |
| **Profit**      | Profit margin after costs. |

This dataset enables analysis of sales trends, profitability, customer segments, and shipping performance.

"""

df=pd.read_excel("/content/Sample - Superstore.xls")
df

import streamlit as st
import plotly.express as px
import pandas as pd


st.title(" :bar_chart: Sample SuperStore EDA")
df = pd.read_excel("Sample - Superstore.xls")

col1, col2 = st.columns((2))
df["Order Date"] = pd.to_datetime(df["Order Date"])

# Getting the min and max date
startDate = pd.to_datetime(df["Order Date"]).min()
endDate = pd.to_datetime(df["Order Date"]).max()

with col1:
    date1 = pd.to_datetime(st.date_input("Start Date", startDate))

with col2:
    date2 = pd.to_datetime(st.date_input("End Date", endDate))

df = df[(df["Order Date"] >= date1) & (df["Order Date"] <= date2)].copy()

st.sidebar.header("Choose your filter: ")
# Create for Region
region = st.sidebar.multiselect("Pick your Region", df["Region"].unique())
if not region:
    df2 = df.copy()
else:
    df2 = df[df["Region"].isin(region)]

# Create for State
state = st.sidebar.multiselect("Pick the State", df2["State"].unique())
if not state:
    df3 = df2.copy()
else:
    df3 = df2[df2["State"].isin(state)]

# Create for City
city = st.sidebar.multiselect("Pick the City",df3["City"].unique())

# Filter the data based on Region, State and City

if not region and not state and not city:
    filtered_df = df
elif not state and not city:
    filtered_df = df[df["Region"].isin(region)]
elif not region and not city:
    filtered_df = df[df["State"].isin(state)]
elif state and city:
    filtered_df = df3[df["State"].isin(state) & df3["City"].isin(city)]
elif region and city:
    filtered_df = df3[df["Region"].isin(region) & df3["City"].isin(city)]
elif region and state:
    filtered_df = df3[df["Region"].isin(region) & df3["State"].isin(state)]
elif city:
    filtered_df = df3[df["City"].isin(city)]
else:
    filtered_df = df3[df["Region"].isin(region) & df3["State"].isin(state) & df3["City"].isin(city)]

category_df = filtered_df.groupby(by = ["Category"], as_index = False)["Sales"].sum()

with col1:
    st.subheader("Category wise Sales")
    fig = px.bar(category_df, x = "Category", y = "Sales", text = ['${:,.2f}'.format(x) for x in category_df["Sales"]],
                 template = "seaborn")
    st.plotly_chart(fig,use_container_width=True, height = 200)

with col2:
    st.subheader("Region wise Sales")
    fig = px.pie(filtered_df, values = "Sales", names = "Region", hole = 0.5)
    fig.update_traces(text = filtered_df["Region"], textposition = "outside")
    st.plotly_chart(fig,use_container_width=True)

cl1, cl2 = st.columns((2))
with cl1:
    with st.expander("Category_ViewData"):
        st.write(category_df.style.background_gradient(cmap="Blues"))
        csv = category_df.to_csv(index = False).encode('utf-8')
        st.download_button("Download Data", data = csv, file_name = "Category.csv", mime = "text/csv",
                            help = 'Click here to download the data as a CSV file')

with cl2:
    with st.expander("Region_ViewData"):
        region = filtered_df.groupby(by = "Region", as_index = False)["Sales"].sum()
        st.write(region.style.background_gradient(cmap="Oranges"))
        csv = region.to_csv(index = False).encode('utf-8')
        st.download_button("Download Data", data = csv, file_name = "Region.csv", mime = "text/csv",
                        help = 'Click here to download the data as a CSV file')

filtered_df["month_year"] = filtered_df["Order Date"].dt.to_period("M")
st.subheader('Time Series Analysis')

linechart = pd.DataFrame(filtered_df.groupby(filtered_df["month_year"].dt.strftime("%Y : %b"))["Sales"].sum()).reset_index()
fig2 = px.line(linechart, x = "month_year", y="Sales", labels = {"Sales": "Amount"},height=500, width = 1000,template="gridon")
st.plotly_chart(fig2,use_container_width=True)

with st.expander("View Data of TimeSeries:"):
    st.write(linechart.T.style.background_gradient(cmap="Blues"))
    csv = linechart.to_csv(index=False).encode("utf-8")
    st.download_button('Download Data', data = csv, file_name = "TimeSeries.csv", mime ='text/csv')


chart1, chart2 = st.columns((2))
with chart1:
    st.subheader('Segment wise Sales')
    fig = px.pie(filtered_df, values = "Sales", names = "Segment", template = "plotly_dark")
    fig.update_traces(text = filtered_df["Segment"], textposition = "inside")
    st.plotly_chart(fig,use_container_width=True)

with chart2:
    st.subheader('Category wise Sales')
    fig = px.pie(filtered_df, values = "Sales", names = "Category", template = "gridon")
    fig.update_traces(text = filtered_df["Category"], textposition = "inside")
    st.plotly_chart(fig,use_container_width=True)

